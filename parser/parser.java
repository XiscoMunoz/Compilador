
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ArbolSintactico.ArbolSintactico;
import ArbolSintactico.ArbolSintactico.*;
import ArbolSintactico.Tipo;
import Semantico.Semantico;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import TablaSimbolos.TablaSimbolos;
import TablaSimbolos.TipoSub;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\023\012\000\002\031" +
    "\004\000\002\031\002\000\002\032\003\000\002\032\004" +
    "\000\002\032\004\000\002\025\004\000\002\025\002\000" +
    "\002\024\004\000\002\024\007\000\002\024\005\000\002" +
    "\024\011\000\002\024\013\000\002\024\011\000\002\024" +
    "\004\000\002\027\004\000\002\027\002\000\002\030\005" +
    "\000\002\030\004\000\002\030\007\000\002\030\005\000" +
    "\002\030\011\000\002\030\013\000\002\030\011\000\002" +
    "\030\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\005\014\000\002\006\003\000\002\006\002" +
    "\000\002\007\005\000\002\007\002\000\002\010\006\000" +
    "\002\010\002\000\002\011\006\000\002\011\005\000\002" +
    "\011\010\000\002\012\003\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\014\004\000\002\003\006" +
    "\000\002\015\004\000\002\015\006\000\002\015\004\000" +
    "\002\002\005\000\002\002\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\004" +
    "\000\002\016\006\000\002\017\004\000\002\017\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\005\000\002\022\002\000\002" +
    "\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\044\004\001\002\000\004\024\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\020\003\016\025\ufffe\037\017\040\022\041\010\042" +
    "\011\043\015\001\002\000\010\025\uffd8\035\uffd8\046\uffd8" +
    "\001\002\000\010\025\uffd7\035\uffd7\046\uffd7\001\002\000" +
    "\004\036\271\001\002\000\004\046\267\001\002\000\020" +
    "\003\ufffd\025\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\001\002\000\004\022\262\001\002\000\004\036\261" +
    "\001\002\000\010\041\uffb4\042\uffb4\046\uffb4\001\002\000" +
    "\020\003\016\025\ufffe\037\017\040\022\041\010\042\011" +
    "\043\015\001\002\000\004\025\106\001\002\000\006\041" +
    "\010\042\011\001\002\000\004\046\024\001\002\000\006" +
    "\010\026\036\uffd9\001\002\000\004\036\uffda\001\002\000" +
    "\016\020\036\024\033\034\032\046\031\047\030\050\037" +
    "\001\002\000\004\036\uffdd\001\002\000\040\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\021\uffcb\032\uffcb\035\uffcb\036" +
    "\uffcb\001\002\000\044\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\076\021\uffcc\022\075\032\uffcc\035\uffcc\036\uffcc" +
    "\001\002\000\004\020\072\001\002\000\012\041\010\042" +
    "\011\047\062\050\066\001\002\000\040\004\045\005\051" +
    "\006\044\007\053\011\050\012\047\013\054\014\052\015" +
    "\057\016\056\017\042\021\uffc5\032\055\035\uffc5\036\uffc5" +
    "\001\002\000\004\036\uffd6\001\002\000\016\020\036\024" +
    "\033\034\032\046\031\047\030\050\037\001\002\000\040" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021\uffca\032\uffca" +
    "\035\uffca\036\uffca\001\002\000\004\021\041\001\002\000" +
    "\040\004\045\005\051\006\044\007\053\011\050\012\047" +
    "\013\054\014\052\015\057\016\056\017\042\021\uffc5\032" +
    "\055\035\uffc5\036\uffc5\001\002\000\016\020\uffb9\024\uffb9" +
    "\034\uffb9\046\uffb9\047\uffb9\050\uffb9\001\002\000\016\020" +
    "\036\024\033\034\032\046\031\047\030\050\037\001\002" +
    "\000\016\020\uffc2\024\uffc2\034\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\016\020\uffc4\024\uffc4\034\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\001\002\000\010\021\uffd3\035\uffd3\036" +
    "\uffd3\001\002\000\016\020\uffbf\024\uffbf\034\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\001\002\000\016\020\uffc0\024\uffc0\034" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\016\020\uffc3" +
    "\024\uffc3\034\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000" +
    "\016\020\uffbd\024\uffbd\034\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\001\002\000\016\020\uffc1\024\uffc1\034\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\001\002\000\016\020\uffbe\024\uffbe\034\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\001\002\000\016\020\uffbb\024" +
    "\uffbb\034\uffbb\046\uffbb\047\uffbb\050\uffbb\001\002\000\016" +
    "\020\uffba\024\uffba\034\uffba\046\uffba\047\uffba\050\uffba\001" +
    "\002\000\016\020\uffbc\024\uffbc\034\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\001\002\000\010\021\uffc6\035\uffc6\036\uffc6\001" +
    "\002\000\010\021\uffd4\035\uffd4\036\uffd4\001\002\000\006" +
    "\025\uffce\035\uffce\001\002\000\010\021\uffd2\035\uffd2\036" +
    "\uffd2\001\002\000\006\025\uffcf\035\uffcf\001\002\000\006" +
    "\025\070\035\067\001\002\000\006\025\uffcd\035\uffcd\001" +
    "\002\000\012\041\010\042\011\047\062\050\066\001\002" +
    "\000\010\021\uffd0\035\uffd0\036\uffd0\001\002\000\010\021" +
    "\uffd1\035\uffd1\036\uffd1\001\002\000\004\021\073\001\002" +
    "\000\040\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\001\002\000\040\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\021\uffc8\032\uffc8\035\uffc8\036" +
    "\uffc8\001\002\000\004\047\104\001\002\000\020\020\036" +
    "\021\uffb5\024\033\034\032\046\031\047\030\050\037\001" +
    "\002\000\004\021\103\001\002\000\006\021\uffb7\035\101" +
    "\001\002\000\020\020\036\021\uffb5\024\033\034\032\046" +
    "\031\047\030\050\037\001\002\000\004\021\uffb6\001\002" +
    "\000\040\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8" +
    "\032\uffb8\035\uffb8\036\uffb8\001\002\000\004\023\105\001" +
    "\002\000\040\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\021" +
    "\uffc7\032\uffc7\035\uffc7\036\uffc7\001\002\000\004\045\107" +
    "\001\002\000\004\024\110\001\002\000\030\003\117\025" +
    "\ufff9\027\111\030\120\031\115\033\121\040\022\041\010" +
    "\042\011\043\015\046\116\001\002\000\004\020\161\001" +
    "\002\000\004\025\160\001\002\000\004\036\157\001\002" +
    "\000\030\003\117\025\ufff9\027\111\030\120\031\115\033" +
    "\121\040\022\041\010\042\011\043\015\046\116\001\002" +
    "\000\004\020\150\001\002\000\010\010\026\020\076\022" +
    "\142\001\002\000\004\036\136\001\002\000\004\024\126" +
    "\001\002\000\004\020\122\001\002\000\016\020\036\024" +
    "\033\034\032\046\031\047\030\050\037\001\002\000\004" +
    "\021\124\001\002\000\004\036\125\001\002\000\030\003" +
    "\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\046\ufff7\001\002\000\030\003" +
    "\117\025\ufff9\027\111\030\120\031\115\033\121\040\022" +
    "\041\010\042\011\043\015\046\116\001\002\000\004\025" +
    "\130\001\002\000\004\027\131\001\002\000\004\020\132" +
    "\001\002\000\016\020\036\024\033\034\032\046\031\047" +
    "\030\050\037\001\002\000\004\021\134\001\002\000\004" +
    "\036\135\001\002\000\030\003\ufff4\025\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\033\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\046\ufff4\001\002\000\030\003\ufff2\025\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\033\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\046\ufff2\001\002\000\004\036\uffe5\001\002\000\004\036" +
    "\uffe7\001\002\000\004\036\uffe6\001\002\000\004\047\145" +
    "\001\002\000\004\036\144\001\002\000\030\003\ufff6\025" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\046\ufff6\001\002\000\004\023\146\001" +
    "\002\000\004\010\026\001\002\000\004\036\uffd5\001\002" +
    "\000\016\020\036\024\033\034\032\046\031\047\030\050" +
    "\037\001\002\000\004\021\152\001\002\000\004\024\153" +
    "\001\002\000\030\003\117\025\ufff9\027\111\030\120\031" +
    "\115\033\121\040\022\041\010\042\011\043\015\046\116" +
    "\001\002\000\004\025\155\001\002\000\030\003\ufff3\025" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\046\ufff3\001\002\000\004\025\ufffa\001" +
    "\002\000\030\003\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\033\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\046\ufff8\001" +
    "\002\000\004\002\000\001\002\000\016\020\036\024\033" +
    "\034\032\046\031\047\030\050\037\001\002\000\004\021" +
    "\163\001\002\000\004\024\164\001\002\000\030\003\117" +
    "\025\ufff9\027\111\030\120\031\115\033\121\040\022\041" +
    "\010\042\011\043\015\046\116\001\002\000\004\025\166" +
    "\001\002\000\030\003\ufff5\025\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\033\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\046\ufff5" +
    "\001\002\000\004\025\uffff\001\002\000\010\041\010\042" +
    "\011\046\uffe2\001\002\000\004\046\173\001\002\000\004" +
    "\046\uffe3\001\002\000\004\020\174\001\002\000\010\021" +
    "\uffe0\041\010\042\011\001\002\000\004\021\205\001\002" +
    "\000\004\046\177\001\002\000\006\021\uffde\035\200\001" +
    "\002\000\006\041\010\042\011\001\002\000\004\021\uffe1" +
    "\001\002\000\004\046\203\001\002\000\006\021\uffde\035" +
    "\200\001\002\000\004\021\uffdf\001\002\000\004\024\206" +
    "\001\002\000\032\003\216\025\ufff0\026\210\027\207\030" +
    "\217\031\213\033\220\040\022\041\010\042\011\043\015" +
    "\046\214\001\002\000\004\020\253\001\002\000\016\020" +
    "\036\024\033\034\032\046\031\047\030\050\037\001\002" +
    "\000\032\003\216\025\ufff0\026\210\027\207\030\217\031" +
    "\213\033\220\040\022\041\010\042\011\043\015\046\214" +
    "\001\002\000\004\036\247\001\002\000\004\020\241\001" +
    "\002\000\010\010\026\020\076\022\142\001\002\000\004" +
    "\025\236\001\002\000\004\036\235\001\002\000\004\024" +
    "\225\001\002\000\004\020\221\001\002\000\016\020\036" +
    "\024\033\034\032\046\031\047\030\050\037\001\002\000" +
    "\004\021\223\001\002\000\004\036\224\001\002\000\032" +
    "\003\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\046\uffed\001\002" +
    "\000\032\003\216\025\ufff0\026\210\027\207\030\217\031" +
    "\213\033\220\040\022\041\010\042\011\043\015\046\214" +
    "\001\002\000\004\025\227\001\002\000\004\027\230\001" +
    "\002\000\004\020\231\001\002\000\016\020\036\024\033" +
    "\034\032\046\031\047\030\050\037\001\002\000\004\021" +
    "\233\001\002\000\004\036\234\001\002\000\032\003\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\046\uffea\001\002\000\032" +
    "\003\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\046\uffe8\001\002" +
    "\000\020\003\uffe4\025\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\001\002\000\004\036\240\001\002\000\032" +
    "\003\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033" +
    "\uffec\040\uffec\041\uffec\042\uffec\043\uffec\046\uffec\001\002" +
    "\000\016\020\036\024\033\034\032\046\031\047\030\050" +
    "\037\001\002\000\004\021\243\001\002\000\004\024\244" +
    "\001\002\000\032\003\216\025\ufff0\026\210\027\207\030" +
    "\217\031\213\033\220\040\022\041\010\042\011\043\015" +
    "\046\214\001\002\000\004\025\246\001\002\000\032\003" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\043\uffe9\046\uffe9\001\002\000" +
    "\032\003\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\033\uffee\040\uffee\041\uffee\042\uffee\043\uffee\046\uffee\001" +
    "\002\000\004\025\ufff1\001\002\000\004\036\252\001\002" +
    "\000\032\003\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\033\uffef\040\uffef\041\uffef\042\uffef\043\uffef\046\uffef" +
    "\001\002\000\016\020\036\024\033\034\032\046\031\047" +
    "\030\050\037\001\002\000\004\021\255\001\002\000\004" +
    "\024\256\001\002\000\032\003\216\025\ufff0\026\210\027" +
    "\207\030\217\031\213\033\220\040\022\041\010\042\011" +
    "\043\015\046\214\001\002\000\004\025\260\001\002\000" +
    "\032\003\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\033\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\046\uffeb\001" +
    "\002\000\020\003\ufffb\025\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\001\002\000\004\047\263\001\002\000" +
    "\004\023\264\001\002\000\004\046\265\001\002\000\004" +
    "\010\026\001\002\000\004\036\uffdb\001\002\000\006\010" +
    "\026\036\uffd9\001\002\000\004\036\uffdc\001\002\000\020" +
    "\003\ufffc\025\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\023\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\013\011\011" +
    "\013\012\031\020\032\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\167\001\001\000\014\005\013\011\011\013\012\031\166" +
    "\032\017\001\001\000\002\001\001\000\004\013\022\001" +
    "\001\000\002\001\001\000\006\012\026\014\024\001\001" +
    "\000\002\001\001\000\006\015\034\016\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\073\001\001" +
    "\000\002\001\001\000\010\002\062\004\064\013\063\001" +
    "\001\000\006\017\060\020\042\001\001\000\002\001\001" +
    "\000\006\015\037\016\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\045\020\042\001\001\000\002" +
    "\001\001\000\006\015\057\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\070\004" +
    "\064\013\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\077\016\033\022\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\077\016" +
    "\033\022\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\112\013\012\024\113\025\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\112\013\012\024\113\025\155\001\001" +
    "\000\002\001\001\000\012\003\136\014\137\021\140\026" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\122\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\112" +
    "\013\012\024\113\025\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\132\016\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\146\001\001" +
    "\000\002\001\001\000\006\015\150\016\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\112\013\012" +
    "\024\113\025\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\161\016\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\112\013\012\024\113\025\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\170\013\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\174\013" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\200\001\001\000\004\013\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\211\013\012\027" +
    "\214\030\210\001\001\000\002\001\001\000\006\015\250" +
    "\016\033\001\001\000\012\011\211\013\012\027\247\030" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\136\014\137\021\140\026\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\221\016\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\211\013\012" +
    "\027\225\030\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\231\016\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\241\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\211\013\012\027\244" +
    "\030\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\253\016\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\211\013\012\027\256" +
    "\030\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\265\001\001\000\002\001\001\000" +
    "\006\012\267\014\024\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    ArbolSintactico arbol= new ArbolSintactico(); // Para generar el arbol sintactico.
    ArrayList<String> errores = new ArrayList<>(); // Lista de errores sintacticos.
    TablaSimbolos ts = new TablaSimbolos(); // Para generar la tabla de simbolos.
    Semantico sem = new Semantico(ts); // Para verificar semanticamente el codigo.

    // Metodos para extrer el arbol, la tabla de simbolos y el semantico del parser.
    public ArbolSintactico getArbol(){ return arbol; }
    public TablaSimbolos getTablaSimbolos(){ return ts; }
    public Semantico getSemantico(){ return sem; }
    
    /**
     * Metodo para añadir un simbolo en la tabla de simbolos, ademas comprueba 
     * si ya existe un simbolo igual.
     * 
     * @param id del simbolo
     * @param tipo del simbolo
     * @param tipoSub del simbolo (clase)
     * @return true si ha sido añadido, false si no ha podido.
     */
    private boolean addSim(String id, Tipo tipo, TipoSub tipoSub){;
        if(!ts.addSimbolo(id, tipo, tipoSub, cur_token.left)){
            sem.addError(4, cur_token.left, id);
            return false;
        }
        return true;
    }

    private boolean addSim2(String id, Tipo tipo, TipoSub tipoSub, Numero n, Expresion exp) {
        if(addSim(id, tipo, tipoSub)){
        int iter = 0;
        String nombre = "";
        TuplaExp te = exp.te;
        if(n.getElem()>=255){
                sem.addError(12, cur_token.left, id);
                return false;
        }
        while (iter < n.getElem()) {
            nombre = "T$" + id + "$" + iter;
            if (te != null) {
                Tipo t = te.tt.getP();
                if(t==null){
                    if(te.tt.getN() != null){
                     addSim(nombre, Tipo.INT, TipoSub.CONSTANTE);
                        }else{
                    addSim(nombre, Tipo.BOOLEAN, TipoSub.CONSTANTE);
                    }
                     
                }else{
                addSim(nombre, t, tipoSub);}
                
            }
            if(te!=null){
                te=te.te;
            }else{
                sem.addError(13, cur_token.left, id);
                return false;
            }
            iter++;
        }}else{
            return false;
         }
            return true;
        
    }


    
    /**
     * Si hay un error en el sintactico, este metodo añade el error pertinente a
     * la lista de errores.
     * 
     * @param cur_token es el token actual.
     */
    @Override
    public void syntax_error(Symbol cur_token) {
        String mensaje = "\t - " + cur_token.toString() + "." + this.showExpectedTokenIds() + " en linea " + cur_token.left;
        this.report_error(mensaje, cur_token);
    }
    
    /**
     * Añade el error a la lista de errores del sintactico.
     * 
     * @param mensaje
     * @param info 
     */
    @Override
    public void report_error(String mensaje, Object info) {
        errores.add(mensaje);
    }
    
    /**
     * Se sobre escribe el error fatal para que no se muestre, ya que no aporta 
     * al sintactico y se utiliza nuestro propio sistema de errores.
     * 
     * @param mensaje
     * @param info 
     */
    @Override
    public void report_fatal_error(String mensaje, Object info) {
        //report_error(mensaje, null);
    }
    
    /**
     * Metodo que devuelve los tokens que el analizador estaba esperando para 
     * mostrarlos en los mensajes de error.
     * 
     * @return 
     */
    private String showExpectedTokenIds() {
        List<Integer> ids = this.expected_token_ids();
        LinkedList<String> list = new LinkedList<>();
        for (Integer expected : ids) {
            list.add(this.symbl_name_from_id(expected));
        }
        if (list.size() > 0) {
            return " Se esperaba: " + list.toString();
        } else {
            return "";
        }
    }

    /**
     * Metodo para saber si ha habido errores en el sintactico.
     * 
     * @return 
     */
    public boolean hayErrores(){
        return !errores.isEmpty();
    }

    /**
     * Devuelve todos los mensajes de error que ha habido en el sintactico.
     * 
     * @return 
     */
    public String toStringErrores(){
        String s = "";
        for(String e : errores){
            s += e + "\n";
        }
        return s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Init start_val = (Init)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= DECLARE LKEY DEFINICIONES RKEY MAIN LKEY SENTENCIAS RKEY 
            {
              Init RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Definiciones d = (Definiciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias m = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.setRaiz(new Init(d, m)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INIT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DEFINICIONES ::= DEFINICION DEFINICIONES 
            {
              Definiciones RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Definicion d = (Definicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definiciones s = (Definiciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Definiciones(d,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINICIONES ::= 
            {
              Definiciones RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICIONES",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION ::= DFUNCION 
            {
              Definicion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dfuncion f = (Dfuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Definicion(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= DECLARACION PUNTYCOMA 
            {
              Definicion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Definicion(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEFINICION ::= error PUNTYCOMA 
            {
              Definicion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sentencias(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.INT, cur_token.left); RESULT = new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(sem.verId(i, cur_token.left)){ sem.selOpId(i, d, cur_token.left);} RESULT = new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new While(e, s));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DO LKEY SENTENCIAS RKEY WHILE LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new DoWhile(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // R_SENTENCIAS ::= R_SENTENCIA R_SENTENCIAS 
            {
              Sentencias RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Sentencias(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // R_SENTENCIAS ::= 
            {
              Sentencias RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIAS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // R_SENTENCIA ::= RETRN EXPRESION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(new Return(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // R_SENTENCIA ::= DECLARACION PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaracion d = (Declaracion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Sentencia(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // R_SENTENCIA ::= OUT LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.INT, cur_token.left); RESULT = new Sentencia(new Out(e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // R_SENTENCIA ::= ID SENTENCIA_ID PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentenciaId d = (SentenciaId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(sem.verId(i, cur_token.left)){ sem.selOpId(i, d, cur_token.left);} RESULT = new Sentencia(new IdSentencia(new Id(i), d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // R_SENTENCIA ::= WHILE LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  sem.verExpr(e, Tipo.BOOLEAN, cur_token.left);RESULT = new Sentencia(new While(e, s));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // R_SENTENCIA ::= DO LKEY R_SENTENCIAS RKEY WHILE LPAREN EXPRESION RPAREN PUNTYCOMA 
            {
              Sentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new DoWhile(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // R_SENTENCIA ::= IF LPAREN EXPRESION RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verExpr(e, Tipo.BOOLEAN, cur_token.left); RESULT = new Sentencia(new If(e, s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // R_SENTENCIA ::= error PUNTYCOMA 
            {
              Sentencia RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("R_SENTENCIA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_ID ::= ASIGNACION 
            {
              SentenciaId RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaId(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_ID ::= FUNCION 
            {
              SentenciaId RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaId(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_ID ::= TUPLAPOS 
            {
              SentenciaId RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TuplaPos t = (TuplaPos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SentenciaId(t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ID",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DFUNCION ::= FUNCTION M RETURN ID LPAREN PARAMETRO RPAREN LKEY R_SENTENCIAS RKEY 
            {
              Dfuncion RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo r = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Dparam p = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verRet(i, r, s, cur_token.left); addSim(i, r, TipoSub.FUNCION); RESULT = new Dfuncion(new Id(i), r, p, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DFUNCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= TYPE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RETURN ::= 
            {
              Tipo RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addSim(i, t, TipoSub.PARAMETRO); RESULT = new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETRO ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMCONCAT ::= COMA TYPE ID PARAMCONCAT 
            {
              Dparam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dparam d = (Dparam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 addSim(i, t, TipoSub.PARAMETRO); RESULT = new Dparam(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMCONCAT ::= 
            {
              Dparam RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMCONCAT",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= CONST TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(addSim(i, t, TipoSub.CONSTANTE)){sem.verConst(i, d, cur_token.left);} RESULT = new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= TYPE ID DECLAREND 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(addSim(i, t, TipoSub.VARIABLE)){sem.verVar(i, d, cur_token.left);} RESULT = new Declaracion(t, new Id(i), d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= TUPLA LCOR NUMERO RCOR ID ASIGNACION 
            {
              Declaracion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(addSim2(i,Tipo.TUPLA,TipoSub.VARIABLE,new Numero(n),d)){sem.verTupla(Tipo.TUPLA,new Numero(n),i,d,cur_token.left);} RESULT = new Declaracion(Tipo.TUPLA,new Numero(n),new Id(i), d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLAREND ::= ASIGNACION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLAREND ::= 
            {
              Expresion RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAREND",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TUPLAPOS ::= LCOR NUMERO RCOR ASIGNACION 
            {
              TuplaPos RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TuplaPos(new Numero(n),a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAPOS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= VALOR OPERACION 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sem.priOp(new Expresion(v, o)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= LPAREN EXPRESION RPAREN OPERACION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Operacion o = (Operacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expresion(e,o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= LKEY TUPLAEXP 
            {
              Expresion RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TuplaExp te = (TuplaExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Expresion(te); //COMPROBAR FUNCION EXPRESION
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TUPLAEXP ::= TUPLATIPO COMA TUPLAEXP 
            {
              TuplaExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TuplaTipo v = (TuplaTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TuplaExp t = (TuplaExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TuplaExp(v,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAEXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TUPLAEXP ::= TUPLATIPO RKEY 
            {
              TuplaExp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TuplaTipo v = (TuplaTipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TuplaExp(v,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAEXP",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TUPLATIPO ::= TYPE 
            {
              TuplaTipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TuplaTipo(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLATIPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TUPLATIPO ::= NUMERO 
            {
              TuplaTipo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TuplaTipo(new Numero(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLATIPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TUPLATIPO ::= BOLEAN 
            {
              TuplaTipo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new TuplaTipo(new Boleano(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLATIPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR ::= ID 
            {
              Valor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sem.verId(id, cur_token.left); RESULT = new Valor(new Id(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALOR ::= NUMERO 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Numero(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALOR ::= BOLEAN 
            {
              Valor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Valor(new Boleano(b)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALOR ::= IN LPAREN RPAREN 
            {
              Valor RESULT =null;
		 RESULT = new Valor(new In()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALOR ::= ID FUNCION 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param f = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(sem.verId(i, cur_token.left)){ sem.verFunc(i, f, cur_token.left); } RESULT = new Valor(new IdSentencia(new Id(i), new SentenciaId(f))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALOR ::= ID LCOR NUMERO RCOR 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 sem.verValTupla(i,new Numero(n),cur_token.left); RESULT=new Valor(new Id(i),new Numero(n));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERACION ::= OP EXPRESION 
            {
              Operacion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Operaciones o = (Operaciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Operacion(o,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= 
            {
              Operacion RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP ::= MULT 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP ::= DIV 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP ::= SUMA 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP ::= RESTA 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP ::= MAYORQUE 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MAYORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= MENORQUE 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MENORQUE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP ::= MAYORIGU 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MAYORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP ::= MENORIGU 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.MENORIGU; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= IGUALES 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.IGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= NIGUALES 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.NIGUALES; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= OR 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= AND 
            {
              Operaciones RESULT =null;
		 RESULT = Operaciones.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FUNCION ::= LPAREN INPARAM RPAREN 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param i = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INPARAM ::= EXPRESION 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INPARAM ::= EXPRESION COMA INPARAM 
            {
              Param RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Param(e, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INPARAM ::= 
            {
              Param RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // M ::= 
            {
              Object RESULT =null;
		 ts.addnivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
